package sdkExamples;

import conflux.web3j.Account;
import conflux.web3j.Cfx;
import conflux.web3j.CfxUnit;
import conflux.web3j.types.Address;
import java.math.BigInteger;
import java.lang.String;
import conflux.web3j.AccountManager;
import java.util.List;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.utils.Numeric;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.datatypes.Function;
import conflux.web3j.request.Call;

import java.util.Arrays;
import java.util.Collections;
import java.net.ConnectException;


import conflux.web3j.response.Receipt;
import java.util.Optional;
import conflux.web3j.contract.abi.DecodeUtil;
import conflux.web3j.contract.ContractCall;
import conflux.web3j.contract.internals.SponsorWhitelistControl;
import conflux.web3j.contract.internals.CrossSpaceCall;
import conflux.web3j.contract.internals.PoSRegister;
import conflux.web3j.contract.internals.Staking;

import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.protocol.websocket.WebSocketService;
import conflux.web3j.request.LogFilter;

import conflux.web3j.types.CfxAddress;


public class Examples
{
        public static void main(String[] args)throws Exception{
        // Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");
        BigInteger res =  cfx.getEpochNumber().sendAndGet();
        System.out.println(res.intValue());
        

        BigInteger epoch = cfx.getEpochNumber().sendAndGet();
        System.out.println("Now Epoch: " + epoch.toString());    
        AccountManager am = new AccountManager("./keystore", 1029);
        List<Address> list = am.list();
        String priv3 = "0xcb8fdf376eed1c2b13ef305e817a61c9fb22b6d65685214c7a0c0d90a074db51"; 
        String priv2 = "0x7f07e3b60bbae4be952f4c9e929619a3cf03edff5a7c476b6b43f378f1c81260"; 


        // // For local keypStore file
        // createAccount(); 
        // queryPriKey();

        // // Basic function
        // sendTx(am.exportPrivateKey(list.get(9), "test"), am.exportPrivateKey(list.get(0), "test"));
        // queryBalance("cfxtest:aat28j33vsw61dw2zzjnu2xm3hbsacjdu6u8uv2kf5");

        // // deployContract
        // deployContract(priv3);
        // deployContract(am.exportPrivateKey(list.get(9), "test")); // For local keypStore file
        // queryContract("cfx:achsehp34v9nzxuk42buntt9eh03h29p5yrsxxrkvc", list.get(9));
        // Address caller = new Address("cfxtest:aat28j33vsw61dw2zzjnu2xm3hbsacjdu6u8uv2kf5");
        // Address receiver = new Address("cfxtest:aakm490w059t8zfyv8vz9bswwbxz6azx7pyutamyu8");
        // Address contract = new Address("cfxtest:acemt0p1erdshxedcwer8fcsc87mejhc86xf0dg6zx");
        // transfer(contract.toString(), caller, priv2 ); //invoke contract

        // //sponsor internal contract
        // setGasSponsor(priv3, contract);
        // setStorageSponsor(priv3, contract);
        // whiteList(priv3, contract, receiver);

        // // staking internal contract
        // staking(priv3);
        // lock(priv3);
        // votePower(priv3);

        // crossspace internal contract
        // createEVM(priv3);
        // callEVM(priv3); //invoke contract
        createEVM_call(priv3); 
        // withdrawFromMapped(priv3);
        // CrossSpace_transfer(priv3);
        // queryMappedBalance(priv3);
        // querymappedNonce(priv3);

        //pos internal contract
        // pos_increaseStake(priv3);
        // pos_addressToIdentifier(priv3);
        // pos_register(priv3);
        // pos_retire(priv3);
        // pos_getVotes(priv3);
        // pos_identifierToAddress(priv3);
        // pubsub();

    }

    public static void createAccount()throws Exception{
        AccountManager am = new AccountManager("./keystore", 1029);
        am.create("test");
        am.create("test");
        List<Address> list = am.list();
        System.out.println(list.size());
        
    }

    public static void queryBalance(String addr){
        Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");
        BigInteger balance = cfx.getBalance(new Address(addr)).sendAndGet();
        System.out.println("balance in Drip: " + balance);
        System.out.println("balance in CFX: " + CfxUnit.drip2Cfx(balance));
    }

    public static void queryPriKey()throws Exception{
        AccountManager am = new AccountManager("./keystore", 1029);
        List<Address> list = am.list();
        String t = am.exportPrivateKey(list.get(2), "test");
        System.out.println("priv1: " + t);
        String t1 = am.exportPrivateKey(list.get(3), "test");
        System.out.println("priv2: " + t1);
        queryBalance(list.get(9).getAddress());
        queryBalance(list.get(13).getAddress());
    }

    public static void sendTx(String from, String to)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        Account account1 = Account.create(cfx, from);
        Account account2 = Account.create(cfx, to);
        String hash = account1.transfer(account2.getAddress(), BigInteger.valueOf(100));
    }

    public static void deployContract(String from)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        String bytecode = "0x60806040523480156200001157600080fd5b50604051620018d1380380620018d183398181016040528101906200003791906200033a565b6040518060400160405280600481526020017f476f6c64000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f474c4400000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb92919062000273565b508060049080519060200190620000d492919062000273565b505050620000e93382620000f060201b60201c565b506200052c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000163576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015a906200039e565b60405180910390fd5b62000177600083836200026960201b60201c565b80600260008282546200018b9190620003ee565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001e29190620003ee565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002499190620003c0565b60405180910390a362000265600083836200026e60201b60201c565b5050565b505050565b505050565b828054620002819062000455565b90600052602060002090601f016020900481019282620002a55760008555620002f1565b82601f10620002c057805160ff1916838001178555620002f1565b82800160010185558215620002f1579182015b82811115620002f0578251825591602001919060010190620002d3565b5b50905062000300919062000304565b5090565b5b808211156200031f57600081600090555060010162000305565b5090565b600081519050620003348162000512565b92915050565b6000602082840312156200034d57600080fd5b60006200035d8482850162000323565b91505092915050565b600062000375601f83620003dd565b91506200038282620004e9565b602082019050919050565b62000398816200044b565b82525050565b60006020820190508181036000830152620003b98162000366565b9050919050565b6000602082019050620003d760008301846200038d565b92915050565b600082825260208201905092915050565b6000620003fb826200044b565b915062000408836200044b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000440576200043f6200048b565b5b828201905092915050565b6000819050919050565b600060028204905060018216806200046e57607f821691505b60208210811415620004855762000484620004ba565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6200051d816200044b565b81146200052957600080fd5b50565b611395806200053c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610e35565b60405180910390f35b6100e660048036038101906100e19190610c83565b610308565b6040516100f39190610e1a565b60405180910390f35b610104610326565b6040516101119190610f37565b60405180910390f35b610134600480360381019061012f9190610c34565b610330565b6040516101419190610e1a565b60405180910390f35b610152610428565b60405161015f9190610f52565b60405180910390f35b610182600480360381019061017d9190610c83565b610431565b60405161018f9190610e1a565b60405180910390f35b6101b260048036038101906101ad9190610bcf565b6104dd565b6040516101bf9190610f37565b60405180910390f35b6101d0610525565b6040516101dd9190610e35565b60405180910390f35b61020060048036038101906101fb9190610c83565b6105b7565b60405161020d9190610e1a565b60405180910390f35b610230600480360381019061022b9190610c83565b6106a2565b60405161023d9190610e1a565b60405180910390f35b610260600480360381019061025b9190610bf8565b6106c0565b60405161026d9190610f37565b60405180910390f35b60606003805461028590611067565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190611067565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b600061031c610315610747565b848461074f565b6001905092915050565b6000600254905090565b600061033d84848461091a565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610388610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90610eb7565b60405180910390fd5b61041c85610414610747565b85840361074f565b60019150509392505050565b60006012905090565b60006104d361043e610747565b84846001600061044c610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104ce9190610f89565b61074f565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461053490611067565b80601f016020809104026020016040519081016040528092919081815260200182805461056090611067565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b600080600160006105c6610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90610f17565b60405180910390fd5b61069761068e610747565b8585840361074f565b600191505092915050565b60006106b66106af610747565b848461091a565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b690610ef7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690610e77565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161090d9190610f37565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098190610ed7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190610e57565b60405180910390fd5b610a05838383610b9b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8290610e97565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b1e9190610f89565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b829190610f37565b60405180910390a3610b95848484610ba0565b50505050565b505050565b505050565b600081359050610bb481611331565b92915050565b600081359050610bc981611348565b92915050565b600060208284031215610be157600080fd5b6000610bef84828501610ba5565b91505092915050565b60008060408385031215610c0b57600080fd5b6000610c1985828601610ba5565b9250506020610c2a85828601610ba5565b9150509250929050565b600080600060608486031215610c4957600080fd5b6000610c5786828701610ba5565b9350506020610c6886828701610ba5565b9250506040610c7986828701610bba565b9150509250925092565b60008060408385031215610c9657600080fd5b6000610ca485828601610ba5565b9250506020610cb585828601610bba565b9150509250929050565b610cc881610ff1565b82525050565b6000610cd982610f6d565b610ce38185610f78565b9350610cf3818560208601611034565b610cfc816110f7565b840191505092915050565b6000610d14602383610f78565b9150610d1f82611108565b604082019050919050565b6000610d37602283610f78565b9150610d4282611157565b604082019050919050565b6000610d5a602683610f78565b9150610d65826111a6565b604082019050919050565b6000610d7d602883610f78565b9150610d88826111f5565b604082019050919050565b6000610da0602583610f78565b9150610dab82611244565b604082019050919050565b6000610dc3602483610f78565b9150610dce82611293565b604082019050919050565b6000610de6602583610f78565b9150610df1826112e2565b604082019050919050565b610e058161101d565b82525050565b610e1481611027565b82525050565b6000602082019050610e2f6000830184610cbf565b92915050565b60006020820190508181036000830152610e4f8184610cce565b905092915050565b60006020820190508181036000830152610e7081610d07565b9050919050565b60006020820190508181036000830152610e9081610d2a565b9050919050565b60006020820190508181036000830152610eb081610d4d565b9050919050565b60006020820190508181036000830152610ed081610d70565b9050919050565b60006020820190508181036000830152610ef081610d93565b9050919050565b60006020820190508181036000830152610f1081610db6565b9050919050565b60006020820190508181036000830152610f3081610dd9565b9050919050565b6000602082019050610f4c6000830184610dfc565b92915050565b6000602082019050610f676000830184610e0b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610f948261101d565b9150610f9f8361101d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fd457610fd3611099565b5b828201905092915050565b6000610fea82610ffd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611052578082015181840152602081019050611037565b83811115611061576000848401525b50505050565b6000600282049050600182168061107f57607f821691505b60208210811415611093576110926110c8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61133a81610fdf565b811461134557600080fd5b50565b6113518161101d565b811461135c57600080fd5b5056fea26469706673582212201364e66e1b28b158bf74a1636e1f833ac402ef2976a0b4e5ec11207f9748bce664736f6c63430008040033";
        BigInteger initialSupply = BigInteger.valueOf(21000000 * BigInteger.TEN.pow(18).longValue());
        Account acc = Account.create(cfx, from);
        String hash = acc.deploy(bytecode, new Uint256(initialSupply));
        cfx.waitForReceipt(hash);
    
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();
        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }
    }

    public static void callContract(String addr, Account acc){
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        ContractCall contract = new ContractCall(cfx, new Address(addr, 1));

        String amount = contract.call("balanceOf", new Address("0x1386B4185A223EF49592233b69291bbe5a80C527", 1).getABIAddress()).sendAndGet();
        BigInteger balance = DecodeUtil.decode(amount, Uint256.class);
        System.out.print("account balance: ");
        System.out.println(balance);
    }

    public static void queryContract(String addr, Address user){
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        Address contractAddr = new Address(addr);
        ContractCall cc = new ContractCall(cfx, contractAddr);
        BigInteger totalSupply = cc.callAndGet(Uint256.class,"totalSupply");
        System.out.println(totalSupply.intValue());
        BigInteger balance = cc.callAndGet(Uint256.class,"balanceOf", user.getABIAddress());
        System.out.println(balance.intValue());

    }

    public static void transfer(String addr, Address receiver, String caller)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");

        BigInteger amount = BigInteger.valueOf(100);
        Account acc = Account.create(cfx, caller);
        System.out.println("THE CALLER INFO:");
        queryContract(addr, acc.getAddress());
        System.out.println("THE RECEIVER INFO:");
        queryContract(addr, receiver);

        Address address = new Address(addr);
        String hash = acc.call(address, "transfer", receiver.getABIAddress(), new Uint256(amount));
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();
        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }

        System.out.println("THE CALLER INFO:");
        queryContract(addr, acc.getAddress());
        System.out.println("THE RECEIVER INFO:");
        queryContract(addr, receiver);


    }

    public static void setGasSponsor(String from, Address addr)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        SponsorWhitelistControl sc = new SponsorWhitelistControl(cfx);
        Account acc = Account.create(cfx, from);
        sc.setAccount(acc);
        

        Account.Option option = new Account.Option();
        Account.Option option1 = option.withValue(BigInteger.valueOf(5 * BigInteger.TEN.pow(18).longValue()));
        
    
        String hash = sc.setSponsorForGas(option1, addr.getABIAddress(), BigInteger.valueOf(1 * BigInteger.TEN.pow(8).longValue()));
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }

        String res = sc.getSponsorForGas(addr.getABIAddress()).getValue();
        System.out.println("The sponsor for gas: "+ res);

        String res1 = sc.getSponsoredBalanceForGas(addr.getABIAddress()).toString();
        System.out.println("The gas: "+ res1);

        
        String res2 = sc.getSponsoredGasFeeUpperBound(addr.getABIAddress()).toString();
        System.out.println("The gas upperbound: "+ res2);

    }

    public static void setStorageSponsor(String from, Address addr)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        SponsorWhitelistControl sc = new SponsorWhitelistControl(cfx);
        Account acc = Account.create(cfx, from);
        sc.setAccount(acc);
        Account.Option option = new Account.Option();      
        option = option.withValue(BigInteger.valueOf(5 * BigInteger.TEN.pow(18).intValue()));

        String hash = sc.setSponsorForCollateral(option, addr.getABIAddress());
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }

        String res = sc.getSponsorForCollateral(addr.getABIAddress()).getValue();
        System.out.println("The sponsor for storage: "+ res);

        System.out.println("The storage balance: "+ sc.getSponsoredBalanceForCollateral(addr.getABIAddress()).toString());
    }

    public static void whiteList(String from, Address addr, Address target)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        SponsorWhitelistControl sc = new SponsorWhitelistControl(cfx);
        Account acc = Account.create(cfx, from);
        sc.setAccount(acc);
        Account.Option option = new Account.Option();


        String hash = sc.addPrivilegeByAdmin(option, addr.getABIAddress(), new org.web3j.abi.datatypes.Address[]{target.getABIAddress()});
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }

        if (sc.isWhitelisted(addr.getABIAddress(), target.getABIAddress())){
            System.out.println("good");
        }
    }

    public static void CrossSpace_transfer(String from)throws Exception{
        Cfx cfx = Cfx.create("http://127.0.0.1:12539");
        CrossSpaceCall csc = new CrossSpaceCall(cfx);
        Account acc = Account.create(cfx, from);
        csc.setAccount(acc);
        Account.Option option = new Account.Option();
        option.withValue(BigInteger.valueOf(100));

        String mappedAddr = acc.getMappedEVMSpaceAddress();

        String hash = csc.transferEVM(option, Numeric.hexStringToByteArray(mappedAddr));
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }
        // String hash = csc.createEVM(option, init);
    }

    public static void withdrawFromMapped(String from)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        CrossSpaceCall csc = new CrossSpaceCall(cfx);
        Account acc = Account.create(cfx, from);
        csc.setAccount(acc);
        Account.Option option = new Account.Option();
        // option.withValue(BigInteger.valueOf(100));

        String mappedAddr = acc.getMappedEVMSpaceAddress();

        String hash = csc.withdrawFromMapped(option, BigInteger.valueOf(50));
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }
        // String hash = csc.createEVM(option, init);
    }

    public static void queryMappedBalance(String addr){
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        CrossSpaceCall csc = new CrossSpaceCall(cfx);
        Account acc = Account.create(cfx, addr);
        csc.setAccount(acc);

        Account.Option option = new Account.Option();
        BigInteger res = csc.mappedBalance(acc.getAddress().getABIAddress());
        System.out.println("The sponsor for gas: "+ res);
    }

    public static void querymappedNonce(String addr){
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        CrossSpaceCall csc = new CrossSpaceCall(cfx);
        Account acc = Account.create(cfx, addr);
        csc.setAccount(acc);

        Account.Option option = new Account.Option();
        BigInteger res = csc.mappedNonce(acc.getAddress().getABIAddress());
        System.out.println("The sponsor for gas: "+ res);
    }

    public static void createEVM(String from)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        // Cfx cfx = Cfx.create("http://127.0.0.1:12539");
        CrossSpaceCall csc = new CrossSpaceCall(cfx);


        Account acc = Account.create(cfx, from);
        csc.setAccount(acc);
        Account.Option option = new Account.Option();
        option.withValue(BigInteger.valueOf(0));
        String bytecodes= "60806040523480156200001157600080fd5b50604051620018d1380380620018d183398181016040528101906200003791906200033a565b6040518060400160405280600481526020017f476f6c64000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f474c4400000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb92919062000273565b508060049080519060200190620000d492919062000273565b505050620000e93382620000f060201b60201c565b506200052c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000163576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015a906200039e565b60405180910390fd5b62000177600083836200026960201b60201c565b80600260008282546200018b9190620003ee565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001e29190620003ee565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002499190620003c0565b60405180910390a362000265600083836200026e60201b60201c565b5050565b505050565b505050565b828054620002819062000455565b90600052602060002090601f016020900481019282620002a55760008555620002f1565b82601f10620002c057805160ff1916838001178555620002f1565b82800160010185558215620002f1579182015b82811115620002f0578251825591602001919060010190620002d3565b5b50905062000300919062000304565b5090565b5b808211156200031f57600081600090555060010162000305565b5090565b600081519050620003348162000512565b92915050565b6000602082840312156200034d57600080fd5b60006200035d8482850162000323565b91505092915050565b600062000375601f83620003dd565b91506200038282620004e9565b602082019050919050565b62000398816200044b565b82525050565b60006020820190508181036000830152620003b98162000366565b9050919050565b6000602082019050620003d760008301846200038d565b92915050565b600082825260208201905092915050565b6000620003fb826200044b565b915062000408836200044b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000440576200043f6200048b565b5b828201905092915050565b6000819050919050565b600060028204905060018216806200046e57607f821691505b60208210811415620004855762000484620004ba565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6200051d816200044b565b81146200052957600080fd5b50565b611395806200053c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610e35565b60405180910390f35b6100e660048036038101906100e19190610c83565b610308565b6040516100f39190610e1a565b60405180910390f35b610104610326565b6040516101119190610f37565b60405180910390f35b610134600480360381019061012f9190610c34565b610330565b6040516101419190610e1a565b60405180910390f35b610152610428565b60405161015f9190610f52565b60405180910390f35b610182600480360381019061017d9190610c83565b610431565b60405161018f9190610e1a565b60405180910390f35b6101b260048036038101906101ad9190610bcf565b6104dd565b6040516101bf9190610f37565b60405180910390f35b6101d0610525565b6040516101dd9190610e35565b60405180910390f35b61020060048036038101906101fb9190610c83565b6105b7565b60405161020d9190610e1a565b60405180910390f35b610230600480360381019061022b9190610c83565b6106a2565b60405161023d9190610e1a565b60405180910390f35b610260600480360381019061025b9190610bf8565b6106c0565b60405161026d9190610f37565b60405180910390f35b60606003805461028590611067565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190611067565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b600061031c610315610747565b848461074f565b6001905092915050565b6000600254905090565b600061033d84848461091a565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610388610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90610eb7565b60405180910390fd5b61041c85610414610747565b85840361074f565b60019150509392505050565b60006012905090565b60006104d361043e610747565b84846001600061044c610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104ce9190610f89565b61074f565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461053490611067565b80601f016020809104026020016040519081016040528092919081815260200182805461056090611067565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b600080600160006105c6610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90610f17565b60405180910390fd5b61069761068e610747565b8585840361074f565b600191505092915050565b60006106b66106af610747565b848461091a565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b690610ef7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690610e77565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161090d9190610f37565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098190610ed7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190610e57565b60405180910390fd5b610a05838383610b9b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8290610e97565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b1e9190610f89565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b829190610f37565b60405180910390a3610b95848484610ba0565b50505050565b505050565b505050565b600081359050610bb481611331565b92915050565b600081359050610bc981611348565b92915050565b600060208284031215610be157600080fd5b6000610bef84828501610ba5565b91505092915050565b60008060408385031215610c0b57600080fd5b6000610c1985828601610ba5565b9250506020610c2a85828601610ba5565b9150509250929050565b600080600060608486031215610c4957600080fd5b6000610c5786828701610ba5565b9350506020610c6886828701610ba5565b9250506040610c7986828701610bba565b9150509250925092565b60008060408385031215610c9657600080fd5b6000610ca485828601610ba5565b9250506020610cb585828601610bba565b9150509250929050565b610cc881610ff1565b82525050565b6000610cd982610f6d565b610ce38185610f78565b9350610cf3818560208601611034565b610cfc816110f7565b840191505092915050565b6000610d14602383610f78565b9150610d1f82611108565b604082019050919050565b6000610d37602283610f78565b9150610d4282611157565b604082019050919050565b6000610d5a602683610f78565b9150610d65826111a6565b604082019050919050565b6000610d7d602883610f78565b9150610d88826111f5565b604082019050919050565b6000610da0602583610f78565b9150610dab82611244565b604082019050919050565b6000610dc3602483610f78565b9150610dce82611293565b604082019050919050565b6000610de6602583610f78565b9150610df1826112e2565b604082019050919050565b610e058161101d565b82525050565b610e1481611027565b82525050565b6000602082019050610e2f6000830184610cbf565b92915050565b60006020820190508181036000830152610e4f8184610cce565b905092915050565b60006020820190508181036000830152610e7081610d07565b9050919050565b60006020820190508181036000830152610e9081610d2a565b9050919050565b60006020820190508181036000830152610eb081610d4d565b9050919050565b60006020820190508181036000830152610ed081610d70565b9050919050565b60006020820190508181036000830152610ef081610d93565b9050919050565b60006020820190508181036000830152610f1081610db6565b9050919050565b60006020820190508181036000830152610f3081610dd9565b9050919050565b6000602082019050610f4c6000830184610dfc565b92915050565b6000602082019050610f676000830184610e0b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610f948261101d565b9150610f9f8361101d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fd457610fd3611099565b5b828201905092915050565b6000610fea82610ffd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611052578082015181840152602081019050611037565b83811115611061576000848401525b50505050565b6000600282049050600182168061107f57607f821691505b60208210811415611093576110926110c8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61133a81610fdf565b811461134557600080fd5b50565b6113518161101d565b811461135c57600080fd5b5056fea26469706673582212201364e66e1b28b158bf74a1636e1f833ac402ef2976a0b4e5ec11207f9748bce664736f6c63430008040033";

		// bytecodes = Numeric.prependHexPrefix(bytecodes);
        BigInteger initialSupply = BigInteger.valueOf(21000000 * BigInteger.TEN.pow(18).longValue());

        option.withGasLimit(BigInteger.valueOf(5000000));
        option.withStorageLimit(BigInteger.valueOf(1000));
        // option.withStorageLimit(storageLimit);

        bytecodes += FunctionEncoder.encodeConstructor(Arrays.asList(new Uint256(initialSupply)));

        String test = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102a4806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636d4ce63c1461003b578063f8a8fd6d14610059575b600080fd5b610043610063565b60405161005091906101e0565b60405180910390f35b6100616100f9565b005b60603373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036100f5576040518060400160405280600e81526020017f48656c6c6f2c20776f726c64312100000000000000000000000000000000000081525090506100f6565b5b90565b3373ffffffffffffffffffffffffffffffffffffffff167f0738f4da267a110d810e6e89fc59e46be6de0c37b1d5cd559b267dc3688e74e060405161013d9061024e565b60405180910390a2565b600081519050919050565b600082825260208201905092915050565b60005b83811015610181578082015181840152602081019050610166565b83811115610190576000848401525b50505050565b6000601f19601f8301169050919050565b60006101b282610147565b6101bc8185610152565b93506101cc818560208601610163565b6101d581610196565b840191505092915050565b600060208201905081810360008301526101fa81846101a7565b905092915050565b7f48656c6c6f2045564d3121000000000000000000000000000000000000000000600082015250565b6000610238600b83610152565b915061024382610202565b602082019050919050565b600060208201905081810360008301526102678161022b565b905091905056fea2646970667358221220517bf86bbc34b111dd6e67cf683ce93080037b72fba45b11335b65bbc3a0d83664736f6c634300080f0033";

        String hash = csc.createEVM(option, Numeric.hexStringToByteArray(bytecodes));

        
        
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }
        // String hash = csc.createEVM(option, init);
    }

    public static void createEVM_call(String from)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        // Cfx cfx = Cfx.create("http://127.0.0.1:12539");
        CrossSpaceCall csc = new CrossSpaceCall(cfx);

        Account acc = Account.create(cfx, from);
        csc.setAccount(acc);
        Account.Option option = new Account.Option();

        String bytecodes= "60806040523480156200001157600080fd5b50604051620018d1380380620018d183398181016040528101906200003791906200033a565b6040518060400160405280600481526020017f476f6c64000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f474c4400000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb92919062000273565b508060049080519060200190620000d492919062000273565b505050620000e93382620000f060201b60201c565b506200052c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000163576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015a906200039e565b60405180910390fd5b62000177600083836200026960201b60201c565b80600260008282546200018b9190620003ee565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001e29190620003ee565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002499190620003c0565b60405180910390a362000265600083836200026e60201b60201c565b5050565b505050565b505050565b828054620002819062000455565b90600052602060002090601f016020900481019282620002a55760008555620002f1565b82601f10620002c057805160ff1916838001178555620002f1565b82800160010185558215620002f1579182015b82811115620002f0578251825591602001919060010190620002d3565b5b50905062000300919062000304565b5090565b5b808211156200031f57600081600090555060010162000305565b5090565b600081519050620003348162000512565b92915050565b6000602082840312156200034d57600080fd5b60006200035d8482850162000323565b91505092915050565b600062000375601f83620003dd565b91506200038282620004e9565b602082019050919050565b62000398816200044b565b82525050565b60006020820190508181036000830152620003b98162000366565b9050919050565b6000602082019050620003d760008301846200038d565b92915050565b600082825260208201905092915050565b6000620003fb826200044b565b915062000408836200044b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000440576200043f6200048b565b5b828201905092915050565b6000819050919050565b600060028204905060018216806200046e57607f821691505b60208210811415620004855762000484620004ba565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6200051d816200044b565b81146200052957600080fd5b50565b611395806200053c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610e35565b60405180910390f35b6100e660048036038101906100e19190610c83565b610308565b6040516100f39190610e1a565b60405180910390f35b610104610326565b6040516101119190610f37565b60405180910390f35b610134600480360381019061012f9190610c34565b610330565b6040516101419190610e1a565b60405180910390f35b610152610428565b60405161015f9190610f52565b60405180910390f35b610182600480360381019061017d9190610c83565b610431565b60405161018f9190610e1a565b60405180910390f35b6101b260048036038101906101ad9190610bcf565b6104dd565b6040516101bf9190610f37565b60405180910390f35b6101d0610525565b6040516101dd9190610e35565b60405180910390f35b61020060048036038101906101fb9190610c83565b6105b7565b60405161020d9190610e1a565b60405180910390f35b610230600480360381019061022b9190610c83565b6106a2565b60405161023d9190610e1a565b60405180910390f35b610260600480360381019061025b9190610bf8565b6106c0565b60405161026d9190610f37565b60405180910390f35b60606003805461028590611067565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190611067565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b600061031c610315610747565b848461074f565b6001905092915050565b6000600254905090565b600061033d84848461091a565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610388610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90610eb7565b60405180910390fd5b61041c85610414610747565b85840361074f565b60019150509392505050565b60006012905090565b60006104d361043e610747565b84846001600061044c610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104ce9190610f89565b61074f565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461053490611067565b80601f016020809104026020016040519081016040528092919081815260200182805461056090611067565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b600080600160006105c6610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90610f17565b60405180910390fd5b61069761068e610747565b8585840361074f565b600191505092915050565b60006106b66106af610747565b848461091a565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b690610ef7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690610e77565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161090d9190610f37565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098190610ed7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190610e57565b60405180910390fd5b610a05838383610b9b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8290610e97565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b1e9190610f89565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b829190610f37565b60405180910390a3610b95848484610ba0565b50505050565b505050565b505050565b600081359050610bb481611331565b92915050565b600081359050610bc981611348565b92915050565b600060208284031215610be157600080fd5b6000610bef84828501610ba5565b91505092915050565b60008060408385031215610c0b57600080fd5b6000610c1985828601610ba5565b9250506020610c2a85828601610ba5565b9150509250929050565b600080600060608486031215610c4957600080fd5b6000610c5786828701610ba5565b9350506020610c6886828701610ba5565b9250506040610c7986828701610bba565b9150509250925092565b60008060408385031215610c9657600080fd5b6000610ca485828601610ba5565b9250506020610cb585828601610bba565b9150509250929050565b610cc881610ff1565b82525050565b6000610cd982610f6d565b610ce38185610f78565b9350610cf3818560208601611034565b610cfc816110f7565b840191505092915050565b6000610d14602383610f78565b9150610d1f82611108565b604082019050919050565b6000610d37602283610f78565b9150610d4282611157565b604082019050919050565b6000610d5a602683610f78565b9150610d65826111a6565b604082019050919050565b6000610d7d602883610f78565b9150610d88826111f5565b604082019050919050565b6000610da0602583610f78565b9150610dab82611244565b604082019050919050565b6000610dc3602483610f78565b9150610dce82611293565b604082019050919050565b6000610de6602583610f78565b9150610df1826112e2565b604082019050919050565b610e058161101d565b82525050565b610e1481611027565b82525050565b6000602082019050610e2f6000830184610cbf565b92915050565b60006020820190508181036000830152610e4f8184610cce565b905092915050565b60006020820190508181036000830152610e7081610d07565b9050919050565b60006020820190508181036000830152610e9081610d2a565b9050919050565b60006020820190508181036000830152610eb081610d4d565b9050919050565b60006020820190508181036000830152610ed081610d70565b9050919050565b60006020820190508181036000830152610ef081610d93565b9050919050565b60006020820190508181036000830152610f1081610db6565b9050919050565b60006020820190508181036000830152610f3081610dd9565b9050919050565b6000602082019050610f4c6000830184610dfc565b92915050565b6000602082019050610f676000830184610e0b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610f948261101d565b9150610f9f8361101d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fd457610fd3611099565b5b828201905092915050565b6000610fea82610ffd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611052578082015181840152602081019050611037565b83811115611061576000848401525b50505050565b6000600282049050600182168061107f57607f821691505b60208210811415611093576110926110c8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61133a81610fdf565b811461134557600080fd5b50565b6113518161101d565b811461135c57600080fd5b5056fea26469706673582212201364e66e1b28b158bf74a1636e1f833ac402ef2976a0b4e5ec11207f9748bce664736f6c63430008040033";

		// bytecodes = Numeric.prependHexPrefix(bytecodes);
        BigInteger initialSupply = BigInteger.valueOf(21000000 * BigInteger.TEN.pow(18).longValue());

        bytecodes = Numeric.prependHexPrefix(bytecodes) + FunctionEncoder.encodeConstructor(Arrays.asList(new Uint256(initialSupply)));


        String test = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102a4806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636d4ce63c1461003b578063f8a8fd6d14610059575b600080fd5b610043610063565b60405161005091906101e0565b60405180910390f35b6100616100f9565b005b60603373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036100f5576040518060400160405280600e81526020017f48656c6c6f2c20776f726c64312100000000000000000000000000000000000081525090506100f6565b5b90565b3373ffffffffffffffffffffffffffffffffffffffff167f0738f4da267a110d810e6e89fc59e46be6de0c37b1d5cd559b267dc3688e74e060405161013d9061024e565b60405180910390a2565b600081519050919050565b600082825260208201905092915050565b60005b83811015610181578082015181840152602081019050610166565b83811115610190576000848401525b50505050565b6000601f19601f8301169050919050565b60006101b282610147565b6101bc8185610152565b93506101cc818560208601610163565b6101d581610196565b840191505092915050565b600060208201905081810360008301526101fa81846101a7565b905092915050565b7f48656c6c6f2045564d3121000000000000000000000000000000000000000000600082015250565b6000610238600b83610152565b915061024382610202565b602082019050919050565b600060208201905081810360008301526102678161022b565b905091905056fea2646970667358221220517bf86bbc34b111dd6e67cf683ce93080037b72fba45b11335b65bbc3a0d83664736f6c634300080f0033";

        CfxAddress contractAddress = new CfxAddress("0x0888000000000000000000000000000000000006", acc.getCfx().getIntNetworkId());
        // ContractCall contract = new ContractCall(cfx, new Address(contractAddress.getAddress()));
        Call call = new Call();
        // String hash = contract.call("createEVM", new DynamicBytes(Numeric.hexStringToByteArray(test))).sendAndGet();
        
        
		Function function = new Function("createEVM", Arrays.asList(new DynamicBytes(Numeric.hexStringToByteArray(bytecodes))), Collections.emptyList());
		// String data = FunctionEncoder.encode(function);

        // Function function = new Function("get", Arrays.asList(), Collections.emptyList());

		String data = FunctionEncoder.encode(function);
        call.setData(data);

        // String hash = csc.callEVM(option, Numeric.hexStringToByteArray("0x8518700768039d4e51c75c4c2594a574fd8d293a"), Numeric.hexStringToByteArray(data));
        // call.setFrom(acc.getAddress());
        // call.setGasLimit(BigInteger.valueOf(5000000));
    
        option.withGasLimit(new BigInteger("10000000000000000"));
        option.withStorageLimit(BigInteger.valueOf(1000000000));
        call.setGas(new BigInteger("10000000000000"));
        call.setGasPrice(new BigInteger("100000000"));
        call.setStorageLimit(BigInteger.valueOf(100000000));
        call.setTo(new Address(contractAddress.getAddress()));
        call.setFrom(acc.getAddress());

        String rawResult = acc.getCfx().call(call).sendAndGet();
        
        System.out.println(rawResult.substring(0, 40));

    }

    public static void callEVM(String from)throws Exception{
        // Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        Cfx cfx = Cfx.create("http://127.0.0.1:12539");

        CrossSpaceCall csc = new CrossSpaceCall(cfx);
        Account acc = Account.create(cfx, from);
        csc.setAccount(acc);
        Account.Option option = new Account.Option();
        // option.withValue(BigInteger.valueOf(100));

        Function function = new Function("get", Arrays.asList(), Collections.emptyList());
		String data = FunctionEncoder.encode(function);

        String hash = csc.callEVM(option, Numeric.hexStringToByteArray("0x8518700768039d4e51c75c4c2594a574fd8d293a"), Numeric.hexStringToByteArray(data));
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }
        // String hash = csc.createEVM(option, init);
    }

    public static void pos_increaseStake(String from)throws Exception{
        Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");
        PoSRegister pr = new PoSRegister(cfx);
        Account acc = Account.create(cfx, from);
        pr.setAccount(acc);  

        Account.Option option = new Account.Option();
        String hash = pr.increaseStake(option, BigInteger.valueOf(1));
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }
    }

    public static void pos_retire(String from)throws Exception{
        Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");
        PoSRegister pr = new PoSRegister(cfx);
        Account acc = Account.create(cfx, from);
        pr.setAccount(acc);  

        Account.Option option = new Account.Option();
        String hash = pr.retire(option, BigInteger.valueOf(1));
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }
    }

    public static void pos_register(String from)throws Exception{
        // Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");

        PoSRegister pr = new PoSRegister(cfx);
        Account acc = Account.create(cfx, from);
        pr.setAccount(acc);  

        Account.Option option = new Account.Option();
        String data = "0xe335b451ec782c401a621206a002fd18240399e5b1e40f8f700e4076bb71d0b689152121000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000030a0cad8604e8afab5169e71cd32153fbe7310e96fea5c83b56749533a06ecb5110bb7558b1bb1410817c4635c747deef900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002103cc2b1514036fc1d05f8ba4f09921aa5199c8c3fc7d0a01c1df030228cb58e7b200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000308a7524b153bb59b2d07bda3f28dea485ed4f7417f336edf3824a33b2460f4e400273897711306705093a753d16211754000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020d7de31d980d777df4d637386b09601259a460ef151a5d1f1c700fe88a3d7e549";

        String hash = pr.register(option,  Numeric.hexStringToByteArray(data));
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }
    }

    
    public static void pos_identifierToAddress(String from)throws Exception{
        Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");
        PoSRegister pr = new PoSRegister(cfx);
        Account acc = Account.create(cfx, from);
        pr.setAccount(acc);  

        Account.Option option = new Account.Option();
        String indentifier =  "ec782c401a621206a002fd18240399e5b1e40f8f700e4076bb71d0b689152121";
        String res = pr.identifierToAddress(Numeric.hexStringToByteArray(indentifier)).getValue();

        System.out.println(res);
    }
    
    public static void pos_addressToIdentifier(String from)throws Exception{
        Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");
        PoSRegister pr = new PoSRegister(cfx);
        Account acc = Account.create(cfx, from);
        pr.setAccount(acc);  

        Account.Option option = new Account.Option();
        String indentifier =  "";
        byte[] res = pr.addressToIdentifier(acc.getAddress().getABIAddress()).getValue();

        System.out.println(Numeric.toHexString(res));
    }

    public static void pos_getVotes(String from)throws Exception{
        Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");
        PoSRegister pr = new PoSRegister(cfx);
        Account acc = Account.create(cfx, from);
        pr.setAccount(acc);  

        Account.Option option = new Account.Option();
        String indentifier =  "ec782c401a621206a002fd18240399e5b1e40f8f700e4076bb71d0b689152121";
        BigInteger[] res = pr.getVotes(Numeric.hexStringToByteArray(indentifier));

        System.out.println(res[0]);
        System.out.println(res[1]);
    }
    

    public static void staking(String from)throws Exception{
            Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");
            Staking pr = new Staking(cfx);
            Account acc = Account.create(cfx, from);
            pr.setAccount(acc);  
    
    
            Account.Option option = new Account.Option();
    
            String hash = pr.deposit(option, new BigInteger("1000000000000000000000"));

            cfx.waitForReceipt(hash);
            Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();
    
            if (receipt.isPresent()) {
                Optional<Address> contractAddr = receipt.get().getContractCreated();
                if (contractAddr.isPresent()) {
                    System.out.printf("Balance of is" + contractAddr.get());
                }
            }else{
                System.out.println("failed");
            }

            BigInteger res = pr.getStakingBalance(acc.getAddress().getABIAddress());
            System.out.println(res.doubleValue());
            queryBalance(acc.getAddress().getAddress());       
    }


    public static void lock(String from)throws Exception{
        Cfx cfx = Cfx.create("http://net8888cfx.confluxrpc.com");
        Staking pr = new Staking(cfx);
        Account acc = Account.create(cfx, from);
        pr.setAccount(acc);  

        Account.Option option = new Account.Option();



        BigInteger res = pr.getStakingBalance(acc.getAddress().getABIAddress());
        System.out.println(res.doubleValue());

        String hash = pr.voteLock(option, new BigInteger("100000000000000000000"), cfx.getEpochNumber().sendAndGet().add(BigInteger.valueOf(100000)));
        cfx.waitForReceipt(hash);
        Optional<Receipt> receipt = cfx.getTransactionReceipt(hash).sendAndGet();

        if (receipt.isPresent()) {
            Optional<Address> contractAddr = receipt.get().getContractCreated();
            if (contractAddr.isPresent()) {
                System.out.printf("Balance of is" + contractAddr.get());
            }
        }else{
            System.out.println("failed");
        }
        BigInteger res1 = pr.getLockedStakingBalance(acc.getAddress().getABIAddress(), cfx.getEpochNumber().sendAndGet());
        System.out.println(res1.doubleValue());

        res = pr.getStakingBalance(acc.getAddress().getABIAddress());
        System.out.println(res.doubleValue());

    }

    public static void votePower(String from)throws Exception{
        Cfx cfx = Cfx.create("https://test.confluxrpc.com");
        Staking pr = new Staking(cfx);
        Account acc = Account.create(cfx, from);
        pr.setAccount(acc);  

        Account.Option option = new Account.Option();

        BigInteger res = pr.getVotePower(acc.getAddress().getABIAddress(), cfx.getEpochNumber().sendAndGet());
        System.out.println(res.longValue());

        
    }

    public static void pubsub() throws ConnectException {
        WebSocketService wsService = new WebSocketService("wss://test.confluxrpc.com/ws", false);
        wsService.connect();
        Cfx cfx = Cfx.create(wsService);

        // add the filter
        BigInteger cur = cfx.getEpochNumber().sendAndGet();
        // construct the filter parameter
        LogFilter filter = new LogFilter();

        // filter details
//        filter.setFromEpoch(Epoch.numberOf(cur));
//        filter.setToEpoch(Epoch.numberOf(cur.add(new BigInteger("20"))));
//        // To filter address
//        List<Address> toFilterAddress = new ArrayList<Address>();
//        toFilterAddress.add(new Address("cfxtest:aajb342mw5kzad6pjjkdz0wxx0tr54nfwpbu6yaj49"));
//        filter.setAddress(toFilterAddress);

        // subscribe epoch events
//             Flowable<EpochNotification> events1 = cfx.subscribeEpochs();
//             Disposable disposable1 = events1.subscribe(event -> {
//                // You can get the detail through getters
//                  System.out.println(event.getParams().getResult().getEpochNumber());
//                 System.out.println("epoch");
//            });
//
//            disposable1.dispose();

        // subscribe newheads events
        cfx.subscribeNewHeads().subscribe(event -> {
            // You can get the detail through getters
            System.out.println(event.getParams().getResult().getEpochNumber());
        }, error -> {
            error.printStackTrace();
        });

        // subscribe log events
//        cfx.subscribeLogs(filter).subscribe(event -> {
//            // You can get the detail through getters
//            System.out.println(event.getParams().getResult().getLogIndex());
//        }, error -> {
//            error.printStackTrace();
//        });
    }
}